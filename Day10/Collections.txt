Collections

1. This class consists exclusively of static methods that operate on or return collections.
2. List, Map, Set


List

1. Sequence.
2. User has control over the list.
3. Allows duplicate elements
4. ListIterator

Implementations of List

** AbstractList
	- public abstract class AbstractList<E> extends AbstractCollection<E> implements List<E>
	- random access
	- unmodifiable list/ modifiable list
	
	* AbstractSequencialList
		- public abstract class AbstractSequentialList<E> extends AbstractList<E>
		- sequencial access
		
		# LinkedList
			- public class LinkedList<E> extends AbstractSequentialList<E> implements List<E>, Deque<E>, Cloneable, Serializable
		
	* ArrayList
		- public class ArrayList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, Serializable
		- resizeable array implementation of List interface
		
		# AttributeList
			- public class AttributeList extends ArrayList<Object>
			- represents a list of values for attributes
			
		# RoleList
			- public class RoleList extends ArrayList<Object>
			- represents a list of role
			
		# RoleUnresolvedList
			- public class RoleUnresolvedList extends ArrayList<Object>
			- representing roles not retrieved from a relation
		
	* Vector
		- public class Vector<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, Serializable
		- growable array of objects
		- optimize storage management
		
		# Stack
			- public class Stack<E> extends Vector<E>
			- last-in-first-out (LIFO) stack of objects
			
** CopyOnWriteArrayList
	- public class CopyOnWriteArrayList<E> extends Object implements List<E>, RandomAccess, Cloneable, Serializable
Map 
